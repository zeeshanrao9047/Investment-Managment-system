import { useState, useEffect } from 'react';
import { useLocation, useParams } from 'wouter';
import { useQuery, useMutation } from '@tanstack/react-query';
import { queryClient } from '@/lib/queryClient';
import { Project } from '@shared/schema';
import Header from '@/components/layout/Header';
import Sidebar from '@/components/layout/Sidebar';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';
import { FileIcon, Globe, Loader2, Save, X } from 'lucide-react';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Switch } from '@/components/ui/switch';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import * as z from 'zod';
import { useToast } from '@/hooks/use-toast';

// Define showcase image schema
const showcaseImageSchema = z.object({
  url: z.string(),
  isMain: z.boolean().default(false),
});

// Define whitelabel form schema
const whitelabelFormSchema = z.object({
  title: z.string().min(1, "Title is required"),
  subtitle: z.string().optional(),
  primaryColor: z.string().default("#4CC7D1"),
  logoUrl: z.string().optional(),
  description: z.string().optional(),
  enableRegistration: z.boolean().default(true),
  showcaseImages: z.array(showcaseImageSchema).default([]),
  investmentDetails: z.string().optional(),
  // Portal Features
  enableSocialSharing: z.boolean().default(false),
  showFundraisingProgress: z.boolean().default(false),
  showTeamMembers: z.boolean().default(true),
  enableDocumentsSection: z.boolean().default(true),
  enableContactForm: z.boolean().default(false),
  contactFormRecipient: z.string().optional(),
  // Financial metrics
  capitalRaise: z.string().optional(),
  postValuation: z.string().optional(),
  revenueProjection: z.string().optional(),
  exitRange: z.string().optional(),
  returnMultiple: z.string().optional(),
  // Resources
  externalResources: z.array(z.object({
    label: z.string(),
    url: z.string()
  })).default([]),
  attachments: z.array(z.object({
    name: z.string(),
    url: z.string(),
    size: z.string().optional(),
    type: z.string().optional()
  })).default([]),
});

type WhitelabelFormValues = z.infer<typeof whitelabelFormSchema>;

export default function ProjectDetailsPage() {
  const params = useParams();
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const projectId = params.id ? parseInt(params.id) : null;
  const [activeTab, setActiveTab] = useState('dealroom');
  const [uploadingImages, setUploadingImages] = useState(false);
  const [imageUploadError, setImageUploadError] = useState<string | null>(null);
  
  // State for external resources URLs
  const [urlList, setUrlList] = useState<string[]>([]);
  const [newUrl, setNewUrl] = useState('');
  
  // State for file attachments
  const [uploadingFiles, setUploadingFiles] = useState(false);
  const [files, setFiles] = useState<{ name: string; url: string; size: string }[]>([]);
  const [fileUploadError, setFileUploadError] = useState<string | null>(null);

  // Fetch project details
  const { data: project, isLoading, error } = useQuery<Project>({
    queryKey: ['/api/projects', projectId],
    queryFn: async () => {
      if (!projectId) throw new Error("Project ID is missing");
      const res = await fetch(`/api/projects/${projectId}`);
      if (!res.ok) throw new Error("Failed to fetch project");
      return res.json();
    },
    enabled: !!projectId,
  });

  // Form setup
  const form = useForm<WhitelabelFormValues>({
    resolver: zodResolver(whitelabelFormSchema),
    defaultValues: {
      title: project?.name || '',
      subtitle: project?.whitelabel?.subtitle || 'Fund Admin Portal',
      primaryColor: project?.whitelabel?.primaryColor || '#4CC7D1',
      logoUrl: project?.whitelabel?.logoUrl || '',
      description: project?.whitelabel?.description || '',
      enableRegistration: project?.whitelabel?.enableRegistration !== false,
      showcaseImages: project?.whitelabel?.showcaseImages || [],
      investmentDetails: project?.whitelabel?.investmentDetails || '',
      // Portal Features
      enableSocialSharing: project?.whitelabel?.enableSocialSharing || false,
      showFundraisingProgress: project?.whitelabel?.showFundraisingProgress || false,
      showTeamMembers: project?.whitelabel?.showTeamMembers !== false,
      enableDocumentsSection: project?.whitelabel?.enableDocumentsSection !== false,
      enableContactForm: project?.whitelabel?.enableContactForm || false,
      contactFormRecipient: project?.whitelabel?.contactFormRecipient || '',
      // Financial metrics
      capitalRaise: project?.whitelabel?.capitalRaise || '',
      postValuation: project?.whitelabel?.postValuation || '',
      revenueProjection: project?.whitelabel?.revenueProjection || '',
      exitRange: project?.whitelabel?.exitRange || '',
      returnMultiple: project?.whitelabel?.returnMultiple || '',
      // Resources
      externalResources: project?.whitelabel?.externalResources || [],
      attachments: project?.whitelabel?.attachments || [],
    },
  });

  // Update form values when project data is loaded
  useEffect(() => {
    if (project) {
      // Cast project to include whitelabel property
      const projWithWhitelabel = project as unknown as Project & { 
        whitelabel?: { 
          subtitle?: string; 
          primaryColor?: string; 
          logoUrl?: string;
          description?: string;
          enableRegistration?: boolean;
          showcaseImages?: {
            url: string;
            isMain: boolean;
          }[];
        } 
      };
      
      if (projWithWhitelabel.whitelabel) {
        form.reset({
          title: projWithWhitelabel.name,
          subtitle: projWithWhitelabel.whitelabel.subtitle || 'Fund Admin Portal',
          primaryColor: projWithWhitelabel.whitelabel.primaryColor || '#4CC7D1',
          logoUrl: projWithWhitelabel.whitelabel.logoUrl || '',
          description: projWithWhitelabel.whitelabel.description || '',
          enableRegistration: projWithWhitelabel.whitelabel.enableRegistration !== false,
          showcaseImages: projWithWhitelabel.whitelabel.showcaseImages || [],
        });
      } else {
        form.reset({
          title: projWithWhitelabel.name,
          subtitle: 'Fund Admin Portal',
          primaryColor: '#4CC7D1',
          logoUrl: '',
          description: '',
          enableRegistration: true,
          showcaseImages: [],
        });
      }
    }
  }, [project, form]);

  // Save whitelabel settings
  const updateWhitelabelMutation = useMutation({
    mutationFn: async (data: WhitelabelFormValues) => {
      if (!projectId) throw new Error("Project ID is missing");
      const res = await fetch(`/api/projects/${projectId}/whitelabel`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });
      
      if (!res.ok) throw new Error("Failed to update whitelabel settings");
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId] });
      toast({
        title: "Settings saved",
        description: "Your white label settings have been updated successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to save settings",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: WhitelabelFormValues) => {
    updateWhitelabelMutation.mutate(data);
  };

  // External Resources URL handlers
  const addUrl = () => {
    if (!newUrl || !newUrl.trim()) {
      toast({
        title: "Validation error",
        description: "Please enter a URL before adding",
        variant: "destructive"
      });
      return;
    }
    
    // Simple URL validation (could use a more robust approach)
    try {
      new URL(newUrl);
      setUrlList([...urlList, newUrl]);
      setNewUrl('');
    } catch (e) {
      toast({
        title: "Invalid URL",
        description: "Please enter a valid URL including http:// or https://",
        variant: "destructive"
      });
    }
  };
  
  const removeUrl = (index: number) => {
    const updatedUrls = [...urlList];
    updatedUrls.splice(index, 1);
    setUrlList(updatedUrls);
  };
  
  // File attachment handlers
  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!projectId) return;
    
    const uploadFiles = event.target.files;
    if (!uploadFiles || uploadFiles.length === 0) return;
    
    setUploadingFiles(true);
    setFileUploadError(null);
    
    try {
      const formData = new FormData();
      for (let i = 0; i < uploadFiles.length; i++) {
        formData.append('files', uploadFiles[i]);
      }
      
      const response = await fetch(`/api/projects/${projectId}/files`, {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to upload files');
      }
      
      const data = await response.json();
      
      const newFiles = data.files.map((file: any) => ({
        name: file.originalName,
        url: file.url,
        size: `${Math.round(file.size / 1024)} KB`
      }));
      
      setFiles([...files, ...newFiles]);
      
      toast({
        title: 'Files uploaded',
        description: `Successfully uploaded ${uploadFiles.length} file${uploadFiles.length > 1 ? 's' : ''}`,
      });
      
      // Clear the input value so the same files can be selected again
      event.target.value = '';
    } catch (error) {
      console.error('Error uploading files:', error);
      setFileUploadError((error as Error).message || 'Failed to upload files');
      toast({
        title: 'Upload failed',
        description: (error as Error).message || 'Failed to upload files',
        variant: 'destructive',
      });
    } finally {
      setUploadingFiles(false);
    }
  };
  
  const removeFile = (index: number) => {
    const updatedFiles = [...files];
    updatedFiles.splice(index, 1);
    setFiles(updatedFiles);
  };

  // Handle image upload from computer
  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!projectId) return;
    
    const files = event.target.files;
    if (!files || files.length === 0) return;
    
    setUploadingImages(true);
    setImageUploadError(null);
    
    try {
      const formData = new FormData();
      for (let i = 0; i < files.length; i++) {
        formData.append('images', files[i]);
      }
      
      const response = await fetch(`/api/projects/${projectId}/images`, {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to upload images');
      }
      
      const data = await response.json();
      
      // Update form with the new images
      const currentImages = form.getValues('showcaseImages') || [];
      form.setValue('showcaseImages', [...currentImages, ...data.images]);
      
      toast({
        title: 'Images uploaded',
        description: `Successfully uploaded ${files.length} image${files.length > 1 ? 's' : ''}`,
      });
      
      // Clear the input value so the same files can be selected again
      event.target.value = '';
    } catch (error) {
      console.error('Error uploading images:', error);
      setImageUploadError((error as Error).message || 'Failed to upload images');
      toast({
        title: 'Upload failed',
        description: (error as Error).message || 'Failed to upload images',
        variant: 'destructive',
      });
    } finally {
      setUploadingImages(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header />
        <div className="flex flex-1">
          <Sidebar />
          <main className="flex-1 bg-gray-50 p-8 flex items-center justify-center">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </main>
        </div>
      </div>
    );
  }

  if (error || !project) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header />
        <div className="flex flex-1">
          <Sidebar />
          <main className="flex-1 bg-gray-50 p-8">
            <div className="max-w-3xl mx-auto">
              <h1 className="text-2xl font-bold mb-6">Project not found</h1>
              <p className="text-muted-foreground mb-6">
                The project you're looking for doesn't exist or you don't have access to it.
              </p>
              <Button onClick={() => navigate('/')}>Back to Projects</Button>
            </div>
          </main>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <div className="flex flex-1">
        <Sidebar />
        <main className="flex-1 bg-gray-50 p-8">
          <div className="max-w-4xl mx-auto">
            <div className="flex items-center justify-between mb-8">
              <div>
                <h1 className="text-3xl font-bold">{project.name}</h1>
                <p className="text-muted-foreground mt-1">
                  {project.subdomain ? `${project.subdomain}.finally.app` : 'No subdomain set'}
                </p>
              </div>
              <div className="flex items-center space-x-2">
                <Button 
                  variant="outline" 
                  onClick={() => navigate('/')}
                >
                  Back to Projects
                </Button>
              </div>
            </div>

            <Tabs defaultValue="dealroom" value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid grid-cols-1 w-[200px] mb-8">
                <TabsTrigger value="dealroom">Dealroom</TabsTrigger>
              </TabsList>
              
              <TabsContent value="dealroom">
                <div className="space-y-8">
                  <Card>
                    <CardHeader>
                      <CardTitle>SHOWCASE IMAGES</CardTitle>
                      <CardDescription>
                        Add images to showcase your project. The main image will be displayed prominently.
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      {/* Main showcase image */}
                      {form.watch('showcaseImages')?.find(img => img.isMain) && (
                        <div className="mb-4">
                          <h3 className="text-base font-semibold mb-2">Main Image</h3>
                          <div className="border rounded-md p-4 inline-block relative">
                            <img 
                              src={form.watch('showcaseImages')?.find(img => img.isMain)?.url || "https://via.placeholder.com/300x200?text=No+Main+Image"} 
                              alt="Main showcase" 
                              className="h-40 w-60 object-cover rounded-md"
                            />
                          </div>
                        </div>
                      )}

                      {/* Additional showcase images */}
                      <div>
                        <h3 className="text-base font-semibold mb-2">Additional Images</h3>
                        <div className="flex flex-wrap gap-4 mb-4">
                          {form.watch('showcaseImages')?.filter(img => !img.isMain)?.map((image, index) => (
                            <div key={index} className="border rounded-md p-2 relative group">
                              <img 
                                src={image.url} 
                                alt={`Project photo ${index + 1}`} 
                                className="h-20 w-28 object-cover rounded-md"
                              />
                              <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 transition-all rounded-md flex items-center justify-center opacity-0 group-hover:opacity-100">
                                <Button 
                                  size="sm" 
                                  variant="secondary"
                                  className="mr-1"
                                  onClick={() => {
                                    const currentImages = form.getValues('showcaseImages');
                                    const updatedImages = currentImages.map((img, i) => ({
                                      ...img,
                                      isMain: i === index
                                    }));
                                    form.setValue('showcaseImages', updatedImages);
                                  }}
                                >
                                  Set Main
                                </Button>
                                <Button 
                                  size="sm" 
                                  variant="destructive"
                                  onClick={() => {
                                    const currentImages = form.getValues('showcaseImages');
                                    form.setValue('showcaseImages', currentImages.filter((_, i) => i !== index));
                                  }}
                                >
                                  Remove
                                </Button>
                              </div>
                            </div>
                          ))}
                        </div>

                        {/* Upload images form */}
                        <div className="mt-4 border rounded-md p-4">
                          <h4 className="text-sm font-medium mb-2">Upload Images</h4>
                          <div className="space-y-4">
                            <div className="grid grid-cols-1 gap-4">
                              <div>
                                <div className="flex items-center space-x-2">
                                  <Label htmlFor="upload-images" className="cursor-pointer py-2 px-4 border border-dashed rounded-md hover:bg-gray-50 flex-grow text-center">
                                    {uploadingImages ? (
                                      <div className="flex items-center justify-center">
                                        <Loader2 className="h-4 w-4 animate-spin mr-2" />
                                        <span>Uploading...</span>
                                      </div>
                                    ) : (
                                      <>Click or drag images here to upload</>
                                    )}
                                  </Label>
                                  <Input 
                                    type="file" 
                                    id="upload-images" 
                                    multiple 
                                    accept="image/*" 
                                    className="hidden"
                                    onChange={handleImageUpload}
                                    disabled={uploadingImages}
                                  />
                                </div>
                                {imageUploadError && (
                                  <p className="text-red-500 text-sm mt-2">{imageUploadError}</p>
                                )}
                              </div>
                            </div>
                            
                            <div className="text-sm text-muted-foreground">
                              <p>Or add an image URL directly:</p>
                            </div>
                            
                            <div className="grid grid-cols-3 gap-4">
                              <div className="col-span-2">
                                <Input 
                                  placeholder="Image URL (e.g., https://example.com/image.jpg)" 
                                  id="newImageUrl"
                                  disabled={uploadingImages}
                                />
                              </div>
                              <div>
                                <Button 
                                  className="w-full"
                                  disabled={uploadingImages}
                                  onClick={() => {
                                    const inputElement = document.getElementById('newImageUrl') as HTMLInputElement;
                                    const url = inputElement?.value?.trim();
                                    
                                    if (!url) {
                                      toast({
                                        title: "Error",
                                        description: "Please enter a valid image URL",
                                        variant: "destructive",
                                      });
                                      return;
                                    }
                                    
                                    const currentImages = form.getValues('showcaseImages') || [];
                                    const newImage = {
                                      url,
                                      isMain: currentImages.length === 0 // Make it main if it's the first image
                                    };
                                    
                                    form.setValue('showcaseImages', [...currentImages, newImage]);
                                    inputElement.value = '';
                                  }}
                                >
                                  Add Image
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardHeader>
                      <CardTitle>INVESTMENT DETAILS</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <div>
                        <h3 className="text-base font-semibold mb-2">Investment Headline</h3>
                        <div className="border rounded-md">
                          <Textarea 
                            id="headline-editor"
                            placeholder="Paragraph description describing the value-creative features that make this an attractive investment."
                            className="min-h-[80px] border-0 focus-visible:ring-0 resize-none"
                          />
                          <div className="border-t py-2 px-3">
                            <div className="flex items-center space-x-2">
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="h-8 w-8 p-0"
                                onClick={() => {
                                  const textarea = document.getElementById('headline-editor') as HTMLTextAreaElement;
                                  if (!textarea) return;
                                  
                                  const start = textarea.selectionStart;
                                  const end = textarea.selectionEnd;
                                  const selectedText = textarea.value.substring(start, end);
                                  
                                  if (selectedText) {
                                    const newText = `**${selectedText}**`;
                                    const newValue = textarea.value.substring(0, start) + newText + textarea.value.substring(end);
                                    textarea.value = newValue;
                                    textarea.focus();
                                    textarea.setSelectionRange(start + 2, start + 2 + selectedText.length);
                                  }
                                }}
                              >
                                <span className="font-bold">B</span>
                              </Button>
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="h-8 w-8 p-0"
                                onClick={() => {
                                  const textarea = document.getElementById('headline-editor') as HTMLTextAreaElement;
                                  if (!textarea) return;
                                  
                                  const start = textarea.selectionStart;
                                  const end = textarea.selectionEnd;
                                  const selectedText = textarea.value.substring(start, end);
                                  
                                  if (selectedText) {
                                    const newText = `*${selectedText}*`;
                                    const newValue = textarea.value.substring(0, start) + newText + textarea.value.substring(end);
                                    textarea.value = newValue;
                                    textarea.focus();
                                    textarea.setSelectionRange(start + 1, start + 1 + selectedText.length);
                                  }
                                }}
                              >
                                <span className="italic">I</span>
                              </Button>
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="h-8 w-8 p-0"
                                onClick={() => {
                                  const textarea = document.getElementById('headline-editor') as HTMLTextAreaElement;
                                  if (!textarea) return;
                                  
                                  const start = textarea.selectionStart;
                                  const end = textarea.selectionEnd;
                                  const selectedText = textarea.value.substring(start, end);
                                  
                                  if (selectedText) {
                                    const newText = `__${selectedText}__`;
                                    const newValue = textarea.value.substring(0, start) + newText + textarea.value.substring(end);
                                    textarea.value = newValue;
                                    textarea.focus();
                                    textarea.setSelectionRange(start + 2, start + 2 + selectedText.length);
                                  }
                                }}
                              >
                                <span className="underline">U</span>
                              </Button>
                              <span className="text-muted-foreground">|</span>
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="h-8 w-8 p-0"
                                onClick={() => {
                                  const textarea = document.getElementById('headline-editor') as HTMLTextAreaElement;
                                  if (!textarea) return;
                                  
                                  const url = prompt('Enter the URL:');
                                  if (!url) return;
                                  
                                  const start = textarea.selectionStart;
                                  const end = textarea.selectionEnd;
                                  const selectedText = textarea.value.substring(start, end) || 'link';
                                  
                                  const newText = `[${selectedText}](${url})`;
                                  const newValue = textarea.value.substring(0, start) + newText + textarea.value.substring(end);
                                  textarea.value = newValue;
                                  textarea.focus();
                                }}
                              >
                                <span>{"<>"}</span>
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <h3 className="text-base font-semibold mb-2">Investment Summary</h3>
                        <div className="border rounded-md">
                          <Textarea 
                            id="summary-editor"
                            className="min-h-[300px] border-0 focus-visible:ring-0 resize-none"
                            placeholder="Provide a detailed investment summary..."
                          />
                          <div className="border-t py-2 px-3">
                            <div className="flex items-center space-x-2">
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="h-8 w-8 p-0"
                                onClick={() => {
                                  const textarea = document.getElementById('summary-editor') as HTMLTextAreaElement;
                                  if (!textarea) return;
                                  
                                  const start = textarea.selectionStart;
                                  const end = textarea.selectionEnd;
                                  const selectedText = textarea.value.substring(start, end);
                                  
                                  if (selectedText) {
                                    const newText = `**${selectedText}**`;
                                    const newValue = textarea.value.substring(0, start) + newText + textarea.value.substring(end);
                                    textarea.value = newValue;
                                    textarea.focus();
                                    textarea.setSelectionRange(start + 2, start + 2 + selectedText.length);
                                  }
                                }}
                              >
                                <span className="font-bold">B</span>
                              </Button>
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="h-8 w-8 p-0"
                                onClick={() => {
                                  const textarea = document.getElementById('summary-editor') as HTMLTextAreaElement;
                                  if (!textarea) return;
                                  
                                  const start = textarea.selectionStart;
                                  const end = textarea.selectionEnd;
                                  const selectedText = textarea.value.substring(start, end);
                                  
                                  if (selectedText) {
                                    const newText = `*${selectedText}*`;
                                    const newValue = textarea.value.substring(0, start) + newText + textarea.value.substring(end);
                                    textarea.value = newValue;
                                    textarea.focus();
                                    textarea.setSelectionRange(start + 1, start + 1 + selectedText.length);
                                  }
                                }}
                              >
                                <span className="italic">I</span>
                              </Button>
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="h-8 w-8 p-0"
                                onClick={() => {
                                  const textarea = document.getElementById('summary-editor') as HTMLTextAreaElement;
                                  if (!textarea) return;
                                  
                                  const start = textarea.selectionStart;
                                  const end = textarea.selectionEnd;
                                  const selectedText = textarea.value.substring(start, end);
                                  
                                  if (selectedText) {
                                    const newText = `__${selectedText}__`;
                                    const newValue = textarea.value.substring(0, start) + newText + textarea.value.substring(end);
                                    textarea.value = newValue;
                                    textarea.focus();
                                    textarea.setSelectionRange(start + 2, start + 2 + selectedText.length);
                                  }
                                }}
                              >
                                <span className="underline">U</span>
                              </Button>
                              <span className="text-muted-foreground">|</span>
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="h-8 w-8 p-0"
                                onClick={() => {
                                  const textarea = document.getElementById('summary-editor') as HTMLTextAreaElement;
                                  if (!textarea) return;
                                  
                                  const url = prompt('Enter the URL:');
                                  if (!url) return;
                                  
                                  const start = textarea.selectionStart;
                                  const end = textarea.selectionEnd;
                                  const selectedText = textarea.value.substring(start, end) || 'link';
                                  
                                  const newText = `[${selectedText}](${url})`;
                                  const newValue = textarea.value.substring(0, start) + newText + textarea.value.substring(end);
                                  textarea.value = newValue;
                                  textarea.focus();
                                }}
                              >
                                <span>{"<>"}</span>
                              </Button>
                              <span className="text-muted-foreground ml-2">|</span>
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="h-8 px-2 ml-2"
                                onClick={() => {
                                  const textarea = document.getElementById('summary-editor') as HTMLTextAreaElement;
                                  if (!textarea) return;
                                  
                                  const start = textarea.selectionStart;
                                  const lineStart = textarea.value.substring(0, start).lastIndexOf('\n') + 1;
                                  
                                  const newText = '- ';
                                  const newValue = textarea.value.substring(0, lineStart) + newText + textarea.value.substring(lineStart);
                                  textarea.value = newValue;
                                  textarea.focus();
                                  textarea.setSelectionRange(lineStart + newText.length, lineStart + newText.length);
                                }}
                              >
                                <span>Bullet</span>
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardHeader>
                      <CardTitle>METRICS & RESOURCES</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <div>
                        <h3 className="text-base font-semibold mb-2">Key Information</h3>
                        <p className="text-sm text-muted-foreground mb-4">Please complete ALL fields below</p>
                        
                        <div className="space-y-4">
                          <div className="grid grid-cols-3 gap-4">
                            <div className="col-span-1">
                              <Label>Capital Raise</Label>
                              <Input placeholder="Enter amount" />
                            </div>
                            <div className="col-span-2">
                              {/* Space reserved for future use */}
                            </div>
                          </div>
                          
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <Label>Post-$</Label>
                              <Input placeholder="Enter amount" />
                            </div>
                            <div>
                              <Label></Label>
                              <div className="h-10"></div>
                            </div>
                          </div>
                          
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <Label>5-7 Year Revenue Projection</Label>
                              <Input placeholder="Enter projection" />
                            </div>
                            <div></div>
                          </div>
                          
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <Label>Revenue Multiple</Label>
                              <Input placeholder="Enter multiple" />
                            </div>
                            <div></div>
                          </div>
                          
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <Label>Exit Range</Label>
                              <Input placeholder="Enter range" />
                            </div>
                            <div></div>
                          </div>
                          
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <Label>Return Multiple - No Pro-Rata</Label>
                              <Input placeholder="Enter multiple" />
                            </div>
                            <div></div>
                          </div>
                          
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <Label>Return Multiple - Pro-Rata</Label>
                              <Input placeholder="Enter multiple" />
                            </div>
                            <div></div>
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <h3 className="text-base font-semibold mb-2">External Resources</h3>
                        <p className="text-sm text-muted-foreground mb-4">Include your website or other links you'd like to add.</p>
                        
                        {urlList.map((url, index) => (
                          <div key={index} className="border rounded-md p-3 mb-4 flex items-center justify-between">
                            <div className="flex items-center">
                              <Globe className="h-4 w-4 mr-2 text-muted-foreground" />
                              <a 
                                href={url} 
                                target="_blank" 
                                rel="noopener noreferrer"
                                className="text-sm hover:underline text-blue-600"
                              >
                                {url}
                              </a>
                            </div>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              onClick={() => removeUrl(index)}
                            >
                              <X className="h-4 w-4" />
                            </Button>
                          </div>
                        ))}
                        
                        <div className="grid grid-cols-3 gap-4">
                          <div className="col-span-2">
                            <Input 
                              placeholder="URL including https://" 
                              value={newUrl}
                              onChange={(e) => setNewUrl(e.target.value)}
                            />
                          </div>
                          <div>
                            <Button 
                              className="w-full"
                              onClick={addUrl}
                            >
                              Add
                            </Button>
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <h3 className="text-base font-semibold mb-2">ATTACHMENTS & DOCUMENTS</h3>
                        
                        {files.map((file, index) => (
                          <div key={index} className="border rounded-md p-3 mb-4 flex items-center justify-between">
                            <div className="flex items-center">
                              <FileIcon className="h-4 w-4 mr-2 text-muted-foreground" />
                              <div>
                                <div className="font-medium">{file.name}</div>
                                <div className="text-xs text-muted-foreground">
                                  Uploaded {new Date().toLocaleDateString()}, {file.size}
                                </div>
                              </div>
                            </div>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              onClick={() => removeFile(index)}
                            >
                              <X className="h-4 w-4" />
                            </Button>
                          </div>
                        ))}
                        
                        <div className="relative">
                          <input 
                            type="file" 
                            id="file-upload" 
                            className="absolute inset-0 w-full h-full opacity-0 cursor-pointer z-10" 
                            onChange={handleFileUpload}
                            multiple
                          />
                          <Button variant="outline" className="w-full relative z-0">+ Add Files</Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* External Resources */}
                  <Card className="mt-8">
                    <CardHeader>
                      <CardTitle>EXTERNAL RESOURCES</CardTitle>
                      <CardDescription>
                        Add links to external resources and documents
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <div className="space-y-4">
                        {/* List of URLs */}
                        <div className="space-y-3">
                          {urlList.map((url, index) => (
                            <div key={index} className="flex items-center space-x-2 p-2 border rounded-md">
                              <Globe className="h-4 w-4 text-muted-foreground" />
                              <a 
                                href={url} 
                                target="_blank" 
                                rel="noopener noreferrer" 
                                className="text-sm text-blue-600 hover:underline flex-grow truncate"
                              >
                                {url}
                              </a>
                              <Button
                                size="sm"
                                variant="ghost"
                                onClick={() => removeUrl(index)}
                                className="h-8 w-8 p-0"
                              >
                                <X className="h-4 w-4" />
                              </Button>
                            </div>
                          ))}
                        </div>

                        {/* Add new URL */}
                        <div className="flex space-x-2">
                          <Input 
                            placeholder="https://example.com" 
                            value={newUrl}
                            onChange={(e) => setNewUrl(e.target.value)}
                            className="flex-grow"
                          />
                          <Button onClick={addUrl}>
                            Add Link
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Document Attachments */}
                  <Card className="mt-8">
                    <CardHeader>
                      <CardTitle>ATTACHMENTS</CardTitle>
                      <CardDescription>
                        Upload documents and files
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <div className="space-y-4">
                        {/* List of files */}
                        <div className="space-y-3">
                          {files.map((file, index) => (
                            <div key={index} className="flex items-center justify-between p-3 border rounded-md">
                              <div className="flex items-center space-x-3">
                                <FileIcon className="h-5 w-5 text-muted-foreground" />
                                <div>
                                  <p className="text-sm font-medium">{file.name}</p>
                                  <p className="text-xs text-muted-foreground">{file.size}</p>
                                </div>
                              </div>
                              <div className="flex items-center space-x-2">
                                <Button 
                                  size="sm" 
                                  variant="outline"
                                  asChild
                                >
                                  <a href={file.url} target="_blank" rel="noopener noreferrer">Download</a>
                                </Button>
                                <Button
                                  size="sm"
                                  variant="ghost"
                                  onClick={() => removeFile(index)}
                                >
                                  <X className="h-4 w-4" />
                                </Button>
                              </div>
                            </div>
                          ))}
                        </div>

                        {/* Upload files */}
                        <div>
                          <Label htmlFor="file-attachments" className="cursor-pointer py-6 px-4 border border-dashed rounded-md hover:bg-gray-50 flex flex-col items-center justify-center w-full">
                            {uploadingFiles ? (
                              <div className="flex items-center justify-center">
                                <Loader2 className="h-6 w-6 animate-spin mr-2" />
                                <span>Uploading...</span>
                              </div>
                            ) : (
                              <>
                                <p className="text-center text-sm">
                                  Drag and drop files here, or <span className="text-blue-600">browse</span>
                                </p>
                                <p className="text-center text-xs text-muted-foreground mt-1">
                                  PDF, Word, Excel, PowerPoint, Images
                                </p>
                              </>
                            )}
                          </Label>
                          <Input 
                            type="file" 
                            id="file-attachments" 
                            multiple 
                            className="hidden"
                            onChange={handleFileUpload}
                            disabled={uploadingFiles}
                          />
                          {fileUploadError && (
                            <p className="text-red-500 text-sm mt-2">{fileUploadError}</p>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
                <Form {...form}>
                  <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                    <Card>
                      <CardHeader>
                        <CardTitle>Portal Branding</CardTitle>
                        <CardDescription>
                          Customize how the client portal will appear to your end users.
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-6">
                        <FormField
                          control={form.control}
                          name="title"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Portal Title</FormLabel>
                              <FormControl>
                                <Input {...field} />
                              </FormControl>
                              <FormDescription>
                                This will appear as the main heading in the portal.
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="subtitle"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Portal Subtitle</FormLabel>
                              <FormControl>
                                <Input {...field} />
                              </FormControl>
                              <FormDescription>
                                Displayed beneath the title on login and other pages.
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="primaryColor"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Brand Color</FormLabel>
                              <FormControl>
                                <div className="flex items-center space-x-4">
                                  <Input {...field} />
                                  <div 
                                    className="w-10 h-10 rounded-md border"
                                    style={{ backgroundColor: field.value }}
                                  />
                                </div>
                              </FormControl>
                              <FormDescription>
                                This color will be used for buttons, highlights, and accents.
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="logoUrl"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Logo URL</FormLabel>
                              <FormControl>
                                <Input {...field} placeholder="https://example.com/logo.png" />
                              </FormControl>
                              <FormDescription>
                                Add your company logo to replace the default logo.
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="description"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Portal Description</FormLabel>
                              <FormControl>
                                <Textarea 
                                  {...field} 
                                  placeholder="Welcome to your fund administration portal..."
                                  className="min-h-[100px]"
                                />
                              </FormControl>
                              <FormDescription>
                                This will be displayed on the login page to provide context to your users.
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </CardContent>
                    </Card>
                    
                    <Card>
                      <CardHeader>
                        <CardTitle>Portal Settings</CardTitle>
                        <CardDescription>
                          Configure how the portal functions for your end users.
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <FormField
                            control={form.control}
                            name="enableRegistration"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-center justify-between">
                                <div className="space-y-0.5">
                                  <FormLabel>Enable Self-Registration</FormLabel>
                                  <FormDescription>
                                    Allow users to create their own accounts.
                                  </FormDescription>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                          
                          <FormField
                            control={form.control}
                            name="enableSocialSharing"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-center justify-between">
                                <div className="space-y-0.5">
                                  <FormLabel>Enable Social Sharing</FormLabel>
                                  <FormDescription>
                                    Add social sharing buttons to dealroom.
                                  </FormDescription>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                          
                          <FormField
                            control={form.control}
                            name="showFundraisingProgress"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-center justify-between">
                                <div className="space-y-0.5">
                                  <FormLabel>Show Fundraising Progress</FormLabel>
                                  <FormDescription>
                                    Display a progress bar for fundraising.
                                  </FormDescription>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                          
                          <FormField
                            control={form.control}
                            name="showTeamMembers"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-center justify-between">
                                <div className="space-y-0.5">
                                  <FormLabel>Show Team Members</FormLabel>
                                  <FormDescription>
                                    Display team section in the dealroom.
                                  </FormDescription>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                          
                          <FormField
                            control={form.control}
                            name="enableDocumentsSection"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-center justify-between">
                                <div className="space-y-0.5">
                                  <FormLabel>Enable Documents Section</FormLabel>
                                  <FormDescription>
                                    Allow access to documents in the dealroom.
                                  </FormDescription>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                          
                          <FormField
                            control={form.control}
                            name="enableContactForm"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-center justify-between">
                                <div className="space-y-0.5">
                                  <FormLabel>Enable Contact Form</FormLabel>
                                  <FormDescription>
                                    Add a contact form to the dealroom.
                                  </FormDescription>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                        </div>
                        
                        <FormField
                          control={form.control}
                          name="contactFormRecipient"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Contact Form Recipient</FormLabel>
                              <FormControl>
                                <Input 
                                  {...field} 
                                  placeholder="email@example.com"
                                  disabled={!form.watch('enableContactForm')}
                                />
                              </FormControl>
                              <FormDescription>
                                Email address where contact form submissions will be sent.
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <div className="space-y-3">
                          <FormLabel>Header Navigation Links</FormLabel>
                          <FormDescription>
                            Add links that will appear in the dealroom header navigation.
                          </FormDescription>
                          
                          {form.watch('headerLinks')?.map((_, index) => (
                            <div key={index} className="flex items-center gap-2">
                              <FormField
                                control={form.control}
                                name={`headerLinks.${index}.label`}
                                render={({ field }) => (
                                  <FormItem className="flex-1">
                                    <FormControl>
                                      <Input {...field} placeholder="Link Label" />
                                    </FormControl>
                                  </FormItem>
                                )}
                              />
                              <FormField
                                control={form.control}
                                name={`headerLinks.${index}.url`}
                                render={({ field }) => (
                                  <FormItem className="flex-1">
                                    <FormControl>
                                      <Input {...field} placeholder="https://example.com" />
                                    </FormControl>
                                  </FormItem>
                                )}
                              />
                              <Button
                                type="button"
                                variant="ghost"
                                size="icon"
                                onClick={() => {
                                  const currentLinks = form.getValues('headerLinks') || [];
                                  form.setValue('headerLinks', currentLinks.filter((_, i) => i !== index));
                                }}
                              >
                                <X className="h-4 w-4" />
                              </Button>
                            </div>
                          ))}
                          
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              const currentLinks = form.getValues('headerLinks') || [];
                              form.setValue('headerLinks', [...currentLinks, { label: '', url: '' }]);
                            }}
                          >
                            Add Link
                          </Button>
                        </div>
                      </CardContent>
                      <CardFooter>
                        <Button 
                          type="submit" 
                          className="ml-auto"
                          disabled={updateWhitelabelMutation.isPending}
                        >
                          {updateWhitelabelMutation.isPending ? (
                            <>
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                              Saving...
                            </>
                          ) : (
                            <>
                              <Save className="mr-2 h-4 w-4" />
                              Save Changes
                            </>
                          )}
                        </Button>
                      </CardFooter>
                    </Card>
                  </form>
                </Form>
              </TabsContent>
              
            </Tabs>
          </div>
        </main>
      </div>
    </div>
  );
}