import React, { useState, useRef, ChangeEvent } from 'react';
import { useLocation, useParams } from 'wouter';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useMutation, useQuery } from '@tanstack/react-query';
import { useToast } from '@/hooks/use-toast';
import { queryClient, apiRequest } from '@/lib/queryClient';
import { 
  Project, 
  showcaseImageSchema,
  whitelabelSchema
} from '@shared/schema';

// UI Components
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { ColorPicker } from '@/components/ui/color-picker';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';

// Icons
import { ArrowLeft, Plus, Trash, Edit, Save, X, Upload, Check, ExternalLink, Paperclip } from 'lucide-react';
import Header from '@/components/layout/Header';
import Sidebar from '@/components/layout/Sidebar';

const whitelabelFormSchema = z.object({
  title: z.string().min(1, "Title is required"),
  subtitle: z.string().optional(),
  primaryColor: z.string().default("#4CC7D1"),
  logoUrl: z.string().optional(),
  description: z.string().optional(),
  enableRegistration: z.boolean().default(true),
  showcaseImages: z.array(showcaseImageSchema).default([]),
  investmentDetails: z.string().optional(),
  // Portal Features
  enableSocialSharing: z.boolean().default(false),
  showFundraisingProgress: z.boolean().default(false),
  showTeamMembers: z.boolean().default(true),
  enableDocumentsSection: z.boolean().default(true),
  enableContactForm: z.boolean().default(false),
  contactFormRecipient: z.string().optional(),
  headerLinks: z.array(z.object({
    label: z.string(),
    url: z.string()
  })).default([]),
  // Financial metrics
  capitalRaise: z.string().optional(),
  postValuation: z.string().optional(),
  revenueProjection: z.string().optional(),
  exitRange: z.string().optional(),
  returnMultiple: z.string().optional(),
  // Resources
  externalResources: z.array(z.object({
    label: z.string(),
    url: z.string()
  })).default([]),
  attachments: z.array(z.object({
    name: z.string(),
    url: z.string(),
    size: z.string().optional(),
    type: z.string().optional()
  })).default([]),
});

type WhitelabelFormValues = z.infer<typeof whitelabelFormSchema>;

export default function ProjectDetailsPage() {
  const params = useParams();
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const projectId = params.id ? parseInt(params.id) : null;
  const [activeTab, setActiveTab] = useState('dealroom');
  const [uploadingImages, setUploadingImages] = useState(false);
  const [imageUploadError, setImageUploadError] = useState<string | null>(null);
  
  // State for external resources URLs
  const [externalResources, setExternalResources] = useState<{label: string, url: string}[]>([]);
  const [newResourceLabel, setNewResourceLabel] = useState('');
  const [newResourceUrl, setNewResourceUrl] = useState('');
  
  // State for file attachments
  const [uploadingFiles, setUploadingFiles] = useState(false);
  const [files, setFiles] = useState<{ name: string; url: string; size?: string; type?: string }[]>([]);
  const [fileUploadError, setFileUploadError] = useState<string | null>(null);

  // Refs for file input
  const fileInputRef = useRef<HTMLInputElement>(null);
  const imageInputRef = useRef<HTMLInputElement>(null);

  // Fetch project details
  const { data: project, isLoading, error } = useQuery<Project>({
    queryKey: ['/api/projects', projectId],
    queryFn: async () => {
      if (!projectId) throw new Error("Project ID is missing");
      const res = await fetch(`/api/projects/${projectId}`);
      if (!res.ok) throw new Error("Failed to fetch project");
      return res.json();
    },
    enabled: !!projectId,
  });

  // Form setup
  const form = useForm<WhitelabelFormValues>({
    resolver: zodResolver(whitelabelFormSchema),
    defaultValues: {
      title: project?.name || '',
      subtitle: project?.whitelabel?.subtitle || 'Fund Admin Portal',
      primaryColor: project?.whitelabel?.primaryColor || '#4CC7D1',
      logoUrl: project?.whitelabel?.logoUrl || '',
      description: project?.whitelabel?.description || '',
      enableRegistration: project?.whitelabel?.enableRegistration !== false,
      showcaseImages: project?.whitelabel?.showcaseImages || [],
      investmentDetails: project?.whitelabel?.investmentDetails || '',
      // Portal Features
      enableSocialSharing: project?.whitelabel?.enableSocialSharing || false,
      showFundraisingProgress: project?.whitelabel?.showFundraisingProgress || false,
      showTeamMembers: project?.whitelabel?.showTeamMembers !== false,
      enableDocumentsSection: project?.whitelabel?.enableDocumentsSection !== false,
      enableContactForm: project?.whitelabel?.enableContactForm || false,
      contactFormRecipient: project?.whitelabel?.contactFormRecipient || '',
      headerLinks: project?.whitelabel?.headerLinks || [],
      // Financial metrics
      capitalRaise: project?.whitelabel?.capitalRaise || '',
      postValuation: project?.whitelabel?.postValuation || '',
      revenueProjection: project?.whitelabel?.revenueProjection || '',
      exitRange: project?.whitelabel?.exitRange || '',
      returnMultiple: project?.whitelabel?.returnMultiple || '',
      // Resources
      externalResources: project?.whitelabel?.externalResources || [],
      attachments: project?.whitelabel?.attachments || [],
    },
  });

  // Update form when project data is loaded
  React.useEffect(() => {
    if (project && project.whitelabel) {
      form.reset({
        title: project.name,
        subtitle: project.whitelabel.subtitle || 'Fund Admin Portal',
        primaryColor: project.whitelabel.primaryColor || '#4CC7D1',
        logoUrl: project.whitelabel.logoUrl || '',
        description: project.whitelabel.description || '',
        enableRegistration: project.whitelabel.enableRegistration !== false,
        showcaseImages: project.whitelabel.showcaseImages || [],
        investmentDetails: project.whitelabel.investmentDetails || '',
        // Portal Features
        enableSocialSharing: project.whitelabel.enableSocialSharing || false,
        showFundraisingProgress: project.whitelabel.showFundraisingProgress || false,
        showTeamMembers: project.whitelabel.showTeamMembers !== false,
        enableDocumentsSection: project.whitelabel.enableDocumentsSection !== false,
        enableContactForm: project.whitelabel.enableContactForm || false,
        contactFormRecipient: project.whitelabel.contactFormRecipient || '',
        headerLinks: project.whitelabel.headerLinks || [],
        // Financial metrics
        capitalRaise: project.whitelabel.capitalRaise || '',
        postValuation: project.whitelabel.postValuation || '',
        revenueProjection: project.whitelabel.revenueProjection || '',
        exitRange: project.whitelabel.exitRange || '',
        returnMultiple: project.whitelabel.returnMultiple || '',
        // Resources
        externalResources: project.whitelabel.externalResources || [],
        attachments: project.whitelabel.attachments || [],
      });

      setExternalResources(project.whitelabel.externalResources || []);
      setFiles(project.whitelabel.attachments || []);
    }
  }, [project, form]);

  // Update whitelabel mutation
  const updateWhitelabelMutation = useMutation({
    mutationFn: async (data: WhitelabelFormValues) => {
      if (!projectId) throw new Error("Project ID is missing");
      const res = await apiRequest("PATCH", `/api/projects/${projectId}/whitelabel`, data);
      return await res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({queryKey: ['/api/projects', projectId]});
      toast({
        title: "Success",
        description: "Whitelabel settings updated successfully",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Handle form submission
  const onSubmit = (data: WhitelabelFormValues) => {
    // Include resources and attachments in the submission
    const formData = {
      ...data,
      externalResources: externalResources,
      attachments: files,
    };
    updateWhitelabelMutation.mutate(formData);
  };

  // Handle image uploads
  const handleImageUpload = async (e: ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0) return;
    setUploadingImages(true);
    setImageUploadError(null);

    try {
      const formData = new FormData();
      formData.append('image', e.target.files[0]);

      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Failed to upload image');
      }

      const data = await response.json();
      const imageUrl = data.url;

      // Get current images and add the new one
      const currentImages = form.getValues('showcaseImages');
      const isMain = currentImages.length === 0; // First image is main by default
      
      const newImage = { url: imageUrl, isMain };
      form.setValue('showcaseImages', [...currentImages, newImage]);

      toast({
        title: "Image Uploaded",
        description: "Image has been uploaded successfully",
      });
    } catch (error) {
      setImageUploadError(error instanceof Error ? error.message : 'Failed to upload image');
      toast({
        title: "Error",
        description: "Failed to upload image",
        variant: "destructive",
      });
    } finally {
      setUploadingImages(false);
    }
  };

  // Handle setting main image
  const handleSetMainImage = (index: number) => {
    const currentImages = [...form.getValues('showcaseImages')];
    
    // Set all images to not main
    currentImages.forEach((img, i) => {
      img.isMain = i === index;
    });
    
    form.setValue('showcaseImages', currentImages);
  };

  // Handle removing image
  const handleRemoveImage = (index: number) => {
    const currentImages = [...form.getValues('showcaseImages')];
    const removed = currentImages.splice(index, 1)[0];
    
    // If removed image was main, set first remaining as main
    if (removed.isMain && currentImages.length > 0) {
      currentImages[0].isMain = true;
    }
    
    form.setValue('showcaseImages', currentImages);
  };

  // Handle adding external resource
  const handleAddResource = () => {
    if (newResourceLabel.trim() === '' || newResourceUrl.trim() === '') {
      toast({
        title: "Error",
        description: "Both label and URL are required",
        variant: "destructive",
      });
      return;
    }

    setExternalResources([...externalResources, { 
      label: newResourceLabel,
      url: newResourceUrl
    }]);
    
    setNewResourceLabel('');
    setNewResourceUrl('');
  };

  // Handle removing resource
  const handleRemoveResource = (index: number) => {
    const updated = [...externalResources];
    updated.splice(index, 1);
    setExternalResources(updated);
  };

  // Handle file upload
  const handleFileUpload = async (e: ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0) return;
    setUploadingFiles(true);
    setFileUploadError(null);

    try {
      const file = e.target.files[0];
      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('/api/upload/file', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Failed to upload file');
      }

      const data = await response.json();
      
      const sizeInKB = (file.size / 1024).toFixed(2);
      const fileSizeDisplay = `${sizeInKB} KB`;
      
      const newFile = {
        name: file.name,
        url: data.url,
        size: fileSizeDisplay,
        type: file.type
      };
      
      setFiles([...files, newFile]);

      toast({
        title: "File Uploaded",
        description: "File has been uploaded successfully",
      });
    } catch (error) {
      setFileUploadError(error instanceof Error ? error.message : 'Failed to upload file');
      toast({
        title: "Error",
        description: "Failed to upload file",
        variant: "destructive",
      });
    } finally {
      setUploadingFiles(false);
    }
  };

  // Handle removing file
  const handleRemoveFile = (index: number) => {
    const updated = [...files];
    updated.splice(index, 1);
    setFiles(updated);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-500">Error</h1>
          <p className="mt-2">{error instanceof Error ? error.message : "Failed to load project"}</p>
          <Button className="mt-4" onClick={() => navigate('/')}>
            Go Back
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-background">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <Header />
        <main className="flex-1 p-6">
          <div className="mx-auto max-w-5xl">
            <div className="flex items-center mb-6">
              <Button
                variant="ghost"
                onClick={() => navigate('/')}
                className="mr-2"
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back
              </Button>
              <h1 className="text-2xl font-bold">
                {project?.name || 'Project Details'}
              </h1>
            </div>

            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid grid-cols-2 w-[400px] mb-8">
                <TabsTrigger value="dealroom">Dealroom</TabsTrigger>
                <TabsTrigger value="access">Access</TabsTrigger>
              </TabsList>

              <TabsContent value="dealroom">
                <Form {...form}>
                  <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                    <Card>
                      <CardHeader>
                        <CardTitle>SHOWCASE IMAGES</CardTitle>
                        <CardDescription>
                          Add images to showcase your project. The main image will be displayed prominently.
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <Button 
                              type="button" 
                              variant="outline" 
                              onClick={() => imageInputRef.current?.click()}
                              disabled={uploadingImages}
                              className="w-full h-32 border-dashed flex flex-col items-center justify-center"
                            >
                              {uploadingImages ? (
                                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                              ) : (
                                <>
                                  <Upload className="h-6 w-6 mb-2" />
                                  <span>Upload Image</span>
                                </>
                              )}
                            </Button>
                            <input
                              type="file"
                              ref={imageInputRef}
                              onChange={handleImageUpload}
                              accept="image/*"
                              className="hidden"
                            />
                            {imageUploadError && (
                              <p className="text-sm text-red-500 mt-1">{imageUploadError}</p>
                            )}
                          </div>
                          
                          {form.watch('showcaseImages').map((image, index) => (
                            <div key={index} className="relative border rounded-lg overflow-hidden">
                              <img
                                src={image.url}
                                alt={`Showcase ${index + 1}`}
                                className="w-full h-32 object-cover"
                              />
                              <div className="absolute top-2 right-2 flex space-x-1">
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="icon"
                                  onClick={() => handleSetMainImage(index)}
                                  className={`h-8 w-8 ${image.isMain ? 'bg-green-500 text-white' : 'bg-white'}`}
                                >
                                  {image.isMain ? <Check className="h-4 w-4" /> : <Edit className="h-4 w-4" />}
                                </Button>
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="icon"
                                  onClick={() => handleRemoveImage(index)}
                                  className="h-8 w-8 bg-white hover:bg-red-100"
                                >
                                  <Trash className="h-4 w-4 text-red-500" />
                                </Button>
                              </div>
                              {image.isMain && (
                                <div className="absolute bottom-0 left-0 right-0 bg-green-500 text-white text-xs py-1 text-center">
                                  Main Image
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      </CardContent>
                    </Card>



                    <Card>
                      <CardHeader>
                        <CardTitle>INVESTMENT DETAILS</CardTitle>
                        <CardDescription>
                          Add rich investment details for potential investors.
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-6">
                        <FormField
                          control={form.control}
                          name="investmentDetails"
                          render={({ field }) => (
                            <FormItem className="w-full">
                              <FormControl>
                                <ReactQuill
                                  theme="snow"
                                  value={field.value || ''}
                                  onChange={field.onChange}
                                  className="h-48"
                                  modules={{
                                    toolbar: [
                                      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                                      ['bold', 'italic', 'underline', 'strike'],
                                      [{'list': 'ordered'}, {'list': 'bullet'}],
                                      [{'indent': '-1'}, {'indent': '+1'}],
                                      ['link'],
                                      ['clean']
                                    ],
                                  }}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </CardContent>
                    </Card>

                    <Card>
                      <CardHeader>
                        <CardTitle>FINANCIAL METRICS</CardTitle>
                        <CardDescription>
                          Key financial information about the investment opportunity.
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <FormField
                            control={form.control}
                            name="capitalRaise"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Capital Raise</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. $5M" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          
                          <FormField
                            control={form.control}
                            name="postValuation"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Post-$</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. $20M" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="revenueProjection"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>5-7 Year Revenue Projection</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. $100M" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="exitRange"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Exit Range</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. $200M-$500M" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="returnMultiple"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Return Multiple</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. 10-15x" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>
                      </CardContent>
                    </Card>

                    <Card>
                      <CardHeader>
                        <CardTitle>EXTERNAL RESOURCES</CardTitle>
                        <CardDescription>
                          Add links to external resources related to this project.
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-6">
                        <div className="flex flex-col md:flex-row gap-4">
                          <div className="flex-1">
                            <Label htmlFor="resource-label">Resource Label</Label>
                            <Input
                              id="resource-label"
                              value={newResourceLabel}
                              onChange={(e) => setNewResourceLabel(e.target.value)}
                              placeholder="e.g. Company Website"
                              className="mt-1"
                            />
                          </div>
                          <div className="flex-1">
                            <Label htmlFor="resource-url">URL</Label>
                            <Input
                              id="resource-url"
                              value={newResourceUrl}
                              onChange={(e) => setNewResourceUrl(e.target.value)}
                              placeholder="https://example.com"
                              className="mt-1"
                            />
                          </div>
                          <div className="self-end">
                            <Button
                              type="button"
                              onClick={handleAddResource}
                              variant="outline"
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              Add
                            </Button>
                          </div>
                        </div>

                        {externalResources.length > 0 && (
                          <div className="space-y-2 mt-4">
                            {externalResources.map((resource, index) => (
                              <div key={index} className="flex items-center justify-between p-3 border rounded-md">
                                <div className="flex items-center">
                                  <ExternalLink className="h-4 w-4 text-muted-foreground mr-2" />
                                  <div>
                                    <p className="font-medium">{resource.label}</p>
                                    <p className="text-sm text-muted-foreground">{resource.url}</p>
                                  </div>
                                </div>
                                <Button
                                  type="button"
                                  variant="ghost"
                                  size="icon"
                                  onClick={() => handleRemoveResource(index)}
                                >
                                  <Trash className="h-4 w-4 text-red-500" />
                                </Button>
                              </div>
                            ))}
                          </div>
                        )}
                      </CardContent>
                    </Card>

                    <Card>
                      <CardHeader>
                        <CardTitle>ATTACHMENTS</CardTitle>
                        <CardDescription>
                          Add document attachments for investors to download.
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-6">
                        <Button 
                          type="button" 
                          variant="outline" 
                          onClick={() => fileInputRef.current?.click()}
                          disabled={uploadingFiles}
                          className="w-full h-24 border-dashed flex flex-col items-center justify-center"
                        >
                          {uploadingFiles ? (
                            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                          ) : (
                            <>
                              <Paperclip className="h-6 w-6 mb-2" />
                              <span>Upload Document</span>
                            </>
                          )}
                        </Button>
                        <input
                          type="file"
                          ref={fileInputRef}
                          onChange={handleFileUpload}
                          className="hidden"
                        />
                        {fileUploadError && (
                          <p className="text-sm text-red-500 mt-1">{fileUploadError}</p>
                        )}

                        {files.length > 0 && (
                          <div className="space-y-2 mt-4">
                            {files.map((file, index) => (
                              <div key={index} className="flex items-center justify-between p-3 border rounded-md">
                                <div className="flex items-center">
                                  <Paperclip className="h-4 w-4 text-muted-foreground mr-2" />
                                  <div>
                                    <p className="font-medium">{file.name}</p>
                                    <p className="text-sm text-muted-foreground">{file.size}</p>
                                  </div>
                                </div>
                                <Button
                                  type="button"
                                  variant="ghost"
                                  size="icon"
                                  onClick={() => handleRemoveFile(index)}
                                >
                                  <Trash className="h-4 w-4 text-red-500" />
                                </Button>
                              </div>
                            ))}
                          </div>
                        )}
                      </CardContent>
                    </Card>



                          <FormField
                            control={form.control}
                            name="enableDocumentsSection"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                                <div className="space-y-0.5">
                                  <FormLabel>Documents Section</FormLabel>
                                  <FormDescription>
                                    Show documents section
                                  </FormDescription>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="enableContactForm"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                                <div className="space-y-0.5">
                                  <FormLabel>Contact Form</FormLabel>
                                  <FormDescription>
                                    Enable contact form
                                  </FormDescription>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                        </div>

                        {form.watch('enableContactForm') && (
                          <FormField
                            control={form.control}
                            name="contactFormRecipient"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Contact Form Recipient Email</FormLabel>
                                <FormControl>
                                  <Input placeholder="contact@example.com" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        )}
                      </CardContent>
                      <CardFooter className="flex justify-end">
                        <Button 
                          type="submit" 
                          disabled={updateWhitelabelMutation.isPending}
                        >
                          {updateWhitelabelMutation.isPending ? (
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          ) : (
                            <>
                              <Save className="mr-2 h-4 w-4" />
                              Save Changes
                            </>
                          )}
                        </Button>
                      </CardFooter>
                    </Card>
                  </form>
                </Form>
              </TabsContent>
              
              <TabsContent value="access">
                <div className="space-y-8">
                  <Card>
                    <CardHeader>
                      <CardTitle>ACCESS MANAGEMENT</CardTitle>
                      <CardDescription>
                        Manage who has access to your project and what they can do.
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <div className="space-y-6">
                        <h3 className="text-lg font-medium">Team Members</h3>
                        <div className="border rounded-md p-4">
                          <div className="flex flex-col space-y-4">
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                              <div className="col-span-2">
                                <Label htmlFor="email-input">Email Address</Label>
                                <Input
                                  id="email-input"
                                  placeholder="teammate@example.com"
                                  type="email"
                                  className="mt-1"
                                />
                              </div>
                              <div className="self-end">
                                <Button className="w-full">
                                  <Plus className="h-4 w-4 mr-2" />
                                  Add Team Member
                                </Button>
                              </div>
                            </div>

                            <div className="mt-4 space-y-2">
                              <div className="flex flex-col space-y-2">
                                <div className="text-sm text-muted-foreground">Current Team Members</div>
                                <div className="border rounded-md">
                                  {/* Example team member row */}
                                  <div className="p-3 flex items-center justify-between">
                                    <div className="flex items-center">
                                      <div className="h-10 w-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-medium">
                                        AA
                                      </div>
                                      <div className="ml-3">
                                        <div className="font-medium">Admin User</div>
                                        <div className="text-sm text-muted-foreground">admin@example.com</div>
                                      </div>
                                    </div>
                                    <Badge>Owner</Badge>
                                  </div>
                                  <Separator />
                                  {/* This would be populated with actual team members */}
                                  {project?.users?.map((email, index) => (
                                    <div key={index} className="p-3 flex items-center justify-between">
                                      <div className="flex items-center">
                                        <div className="h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center text-sm font-medium">
                                          {email.substring(0, 2).toUpperCase()}
                                        </div>
                                        <div className="ml-3">
                                          <div className="font-medium">{email.split('@')[0]}</div>
                                          <div className="text-sm text-muted-foreground">{email}</div>
                                        </div>
                                      </div>
                                      <Button variant="ghost" size="sm" className="text-red-500">
                                        <Trash className="h-4 w-4 mr-2" />
                                        Remove
                                      </Button>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div className="space-y-6">
                        <h3 className="text-lg font-medium">Dealroom Settings</h3>
                        <div className="border rounded-md p-4">
                          <div className="flex flex-col space-y-4">
                            <div className="flex flex-row items-start space-x-3 space-y-0">
                              <div className="flex items-center space-x-2">
                                <Switch id="public-access" />
                                <Label htmlFor="public-access">Public Access</Label>
                              </div>
                              <div className="text-sm text-muted-foreground">
                                Allow anyone with the link to view the dealroom
                              </div>
                            </div>

                            <div className="flex flex-row items-start space-x-3 space-y-0">
                              <div className="flex items-center space-x-2">
                                <Switch id="require-login" />
                                <Label htmlFor="require-login">Require Login</Label>
                              </div>
                              <div className="text-sm text-muted-foreground">
                                Users must have an account and be logged in to view the dealroom
                              </div>
                            </div>

                            <div className="flex flex-row items-start space-x-3 space-y-0">
                              <div className="flex items-center space-x-2">
                                <Switch id="allow-comments" />
                                <Label htmlFor="allow-comments">Allow Comments</Label>
                              </div>
                              <div className="text-sm text-muted-foreground">
                                Enable team members to leave comments on the dealroom
                              </div>
                            </div>

                            <div className="flex flex-row items-start space-x-3 space-y-0">
                              <div className="flex items-center space-x-2">
                                <Switch id="tracking" />
                                <Label htmlFor="tracking">Analytics Tracking</Label>
                              </div>
                              <div className="text-sm text-muted-foreground">
                                Track visitor activity and page views
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div className="space-y-6">
                        <h3 className="text-lg font-medium">Domain Settings</h3>
                        <div className="border rounded-md p-4">
                          <div className="flex flex-col space-y-4">
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                              <div className="col-span-1">
                                <Label htmlFor="subdomain">Subdomain</Label>
                                <Input 
                                  id="subdomain" 
                                  placeholder="projectname"
                                  defaultValue={project?.subdomain || ''}
                                  className="mt-1"
                                />
                              </div>
                              <div className="col-span-2 flex items-end">
                                <div className="text-sm text-muted-foreground pt-7">
                                  .yourdomain.com
                                </div>
                              </div>
                            </div>

                            <div>
                              <Label htmlFor="custom-domain">Custom Domain</Label>
                              <Input 
                                id="custom-domain" 
                                placeholder="deals.yourcompany.com"
                                className="mt-1"
                              />
                              <p className="text-sm text-muted-foreground mt-1">
                                You will need to configure DNS settings with your domain provider.
                              </p>
                            </div>

                            <Button className="w-fit">
                              <Save className="h-4 w-4 mr-2" />
                              Save Domain Settings
                            </Button>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>
              
            </Tabs>
          </div>
        </main>
      </div>
    </div>
  );
}