import React, { useState, useRef, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useMutation, useQuery } from "@tanstack/react-query";
import { useParams, useLocation } from "wouter";
import { useToast } from "@/hooks/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { ColorPicker } from "@/components/ui/color-picker";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { whitelabelSchema } from "@shared/schema";
import { Check, Trash, Upload, Paperclip, Link, Plus, X } from "lucide-react";

// Form schema definition
const whitelabelFormSchema = whitelabelSchema.extend({
  title: z.string().min(1, "Title is required"),
});

type WhitelabelFormValues = z.infer<typeof whitelabelFormSchema>;

export default function ProjectDetailsPage() {
  const params = useParams();
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const projectId = params.id ? parseInt(params.id) : null;
  const [activeTab, setActiveTab] = useState('dealroom');
  const [uploadingImages, setUploadingImages] = useState(false);
  const [imageUploadError, setImageUploadError] = useState<string | null>(null);
  
  // State for external resources URLs
  const [externalResources, setExternalResources] = useState<{label: string, url: string}[]>([]);
  const [newResourceLabel, setNewResourceLabel] = useState('');
  const [newResourceUrl, setNewResourceUrl] = useState('');
  
  // State for file attachments
  const [uploadingFiles, setUploadingFiles] = useState(false);
  const [files, setFiles] = useState<{ name: string; url: string; size?: string; type?: string }[]>([]);
  const [fileUploadError, setFileUploadError] = useState<string | null>(null);

  // Refs for file input
  const fileInputRef = useRef<HTMLInputElement>(null);
  const imageInputRef = useRef<HTMLInputElement>(null);

  // Get project data
  const { data: project, isLoading } = useQuery({
    queryKey: ['/api/projects', projectId],
    enabled: !!projectId,
  });

  // Initialize form with project data
  const form = useForm<WhitelabelFormValues>({
    resolver: zodResolver(whitelabelFormSchema),
    defaultValues: {
      title: project?.name || '',
      subtitle: project?.whitelabel?.subtitle || '',
      primaryColor: project?.whitelabel?.primaryColor || '#4CC7D1',
      logoUrl: project?.whitelabel?.logoUrl || '',
      description: project?.whitelabel?.description || '',
      enableRegistration: project?.whitelabel?.enableRegistration !== undefined ? project?.whitelabel?.enableRegistration : true,
      showcaseImages: project?.whitelabel?.showcaseImages || [],
      
      // Investment and financial details
      investmentDetails: project?.whitelabel?.investmentDetails || '',
      capitalRaise: project?.whitelabel?.capitalRaise || '',
      postValuation: project?.whitelabel?.postValuation || '',
      revenueProjection: project?.whitelabel?.revenueProjection || '',
      exitRange: project?.whitelabel?.exitRange || '',
      returnMultiple: project?.whitelabel?.returnMultiple || '',
      
      // UI settings
      enableSocialSharing: project?.whitelabel?.enableSocialSharing !== undefined ? project?.whitelabel?.enableSocialSharing : false,
      showFundraisingProgress: project?.whitelabel?.showFundraisingProgress !== undefined ? project?.whitelabel?.showFundraisingProgress : false,
      showTeamMembers: project?.whitelabel?.showTeamMembers !== undefined ? project?.whitelabel?.showTeamMembers : true,
      enableDocumentsSection: project?.whitelabel?.enableDocumentsSection !== undefined ? project?.whitelabel?.enableDocumentsSection : true,
      enableContactForm: project?.whitelabel?.enableContactForm !== undefined ? project?.whitelabel?.enableContactForm : false,
      contactFormRecipient: project?.whitelabel?.contactFormRecipient || '',
      headerLinks: project?.whitelabel?.headerLinks || [],
      
      // Resources
      externalResources: project?.whitelabel?.externalResources || [],
      attachments: project?.whitelabel?.attachments || [],
    },
  });

  // Update form values when project data is loaded
  useEffect(() => {
    if (project) {
      form.reset({
        title: project.name,
        subtitle: project.whitelabel?.subtitle || '',
        primaryColor: project.whitelabel?.primaryColor || '#4CC7D1',
        logoUrl: project.whitelabel?.logoUrl || '',
        description: project.whitelabel?.description || '',
        enableRegistration: project.whitelabel?.enableRegistration !== undefined ? project.whitelabel?.enableRegistration : true,
        showcaseImages: project.whitelabel?.showcaseImages || [],
        
        // Investment and financial details
        investmentDetails: project.whitelabel?.investmentDetails || '',
        capitalRaise: project.whitelabel?.capitalRaise || '',
        postValuation: project.whitelabel?.postValuation || '',
        revenueProjection: project.whitelabel?.revenueProjection || '',
        exitRange: project.whitelabel?.exitRange || '',
        returnMultiple: project.whitelabel?.returnMultiple || '',
        
        // UI settings
        enableSocialSharing: project.whitelabel?.enableSocialSharing !== undefined ? project.whitelabel?.enableSocialSharing : false,
        showFundraisingProgress: project.whitelabel?.showFundraisingProgress !== undefined ? project.whitelabel?.showFundraisingProgress : false,
        showTeamMembers: project.whitelabel?.showTeamMembers !== undefined ? project.whitelabel?.showTeamMembers : true,
        enableDocumentsSection: project.whitelabel?.enableDocumentsSection !== undefined ? project.whitelabel?.enableDocumentsSection : true,
        enableContactForm: project.whitelabel?.enableContactForm !== undefined ? project.whitelabel?.enableContactForm : false,
        contactFormRecipient: project.whitelabel?.contactFormRecipient || '',
        headerLinks: project.whitelabel?.headerLinks || [],
        
        // Resources
        externalResources: project.whitelabel?.externalResources || [],
        attachments: project.whitelabel?.attachments || [],
      });
      
      // Set external resources state
      setExternalResources(project.whitelabel?.externalResources || []);
      
      // Set attachments state
      setFiles(project.whitelabel?.attachments || []);
    }
  }, [project, form]);

  // Mutation to update whitelabel settings
  const whitelabelMutation = useMutation({
    mutationFn: async (data: WhitelabelFormValues) => {
      if (!projectId) throw new Error("Project ID is required");
      
      const response = await apiRequest(
        "PATCH",
        `/api/projects/${projectId}/whitelabel`,
        data
      );
      
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Settings updated",
        description: "Your dealroom settings have been updated successfully.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId] });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: `Failed to update settings: ${error.message}`,
        variant: "destructive",
      });
    },
  });

  // Handle form submission
  const onSubmit = (data: WhitelabelFormValues) => {
    // Add external resources and attachments to the form data
    const formData = {
      ...data,
      externalResources,
      attachments: files,
    };
    
    whitelabelMutation.mutate(formData);
  };

  // Handle image upload
  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0 || !projectId) return;
    
    setUploadingImages(true);
    setImageUploadError(null);
    
    const formData = new FormData();
    for (let i = 0; i < files.length; i++) {
      formData.append('images', files[i]);
    }
    
    try {
      const response = await fetch(`/api/projects/${projectId}/images`, {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error('Failed to upload images');
      }
      
      const result = await response.json();
      
      // Update form with new images
      form.setValue('showcaseImages', result.project.whitelabel.showcaseImages);
      
      toast({
        title: "Images uploaded",
        description: "Your images have been uploaded successfully.",
      });
      
      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId] });
    } catch (error) {
      setImageUploadError((error as Error).message);
      toast({
        title: "Error",
        description: `Failed to upload images: ${(error as Error).message}`,
        variant: "destructive",
      });
    } finally {
      setUploadingImages(false);
      // Clear file input
      if (imageInputRef.current) {
        imageInputRef.current.value = '';
      }
    }
  };

  // Handle setting main image
  const handleSetMainImage = async (imageIndex: number) => {
    if (!projectId) return;
    
    try {
      const response = await apiRequest(
        "PUT",
        `/api/projects/${projectId}/images/${imageIndex}/main`,
        {}
      );
      
      const result = await response.json();
      
      // Update form with updated images
      form.setValue('showcaseImages', result.project.whitelabel.showcaseImages);
      
      toast({
        title: "Main image updated",
        description: "Your main showcase image has been updated.",
      });
      
      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId] });
    } catch (error) {
      toast({
        title: "Error",
        description: `Failed to update main image: ${(error as Error).message}`,
        variant: "destructive",
      });
    }
  };

  // Handle image deletion
  const handleDeleteImage = async (imageIndex: number) => {
    if (!projectId) return;
    
    try {
      const response = await apiRequest(
        "DELETE",
        `/api/projects/${projectId}/images/${imageIndex}`,
        {}
      );
      
      const result = await response.json();
      
      // Update form with updated images
      form.setValue('showcaseImages', result.project.whitelabel.showcaseImages);
      
      toast({
        title: "Image deleted",
        description: "The image has been deleted successfully.",
      });
      
      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId] });
    } catch (error) {
      toast({
        title: "Error",
        description: `Failed to delete image: ${(error as Error).message}`,
        variant: "destructive",
      });
    }
  };

  // Handle adding external resource
  const handleAddResource = () => {
    if (!newResourceLabel || !newResourceUrl) {
      toast({
        title: "Error",
        description: "Both label and URL are required for external resources.",
        variant: "destructive",
      });
      return;
    }
    
    const newResources = [
      ...externalResources,
      { label: newResourceLabel, url: newResourceUrl }
    ];
    
    setExternalResources(newResources);
    setNewResourceLabel('');
    setNewResourceUrl('');
  };

  // Handle removing external resource
  const handleRemoveResource = (index: number) => {
    const newResources = [...externalResources];
    newResources.splice(index, 1);
    setExternalResources(newResources);
  };

  // Handle file upload
  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const uploadedFiles = event.target.files;
    if (!uploadedFiles || uploadedFiles.length === 0 || !projectId) return;
    
    setUploadingFiles(true);
    setFileUploadError(null);
    
    const formData = new FormData();
    for (let i = 0; i < uploadedFiles.length; i++) {
      formData.append('files', uploadedFiles[i]);
    }
    
    try {
      const response = await fetch(`/api/projects/${projectId}/files`, {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error('Failed to upload files');
      }
      
      const result = await response.json();
      
      // Update files state
      setFiles(prevFiles => [...prevFiles, ...result.files]);
      
      toast({
        title: "Files uploaded",
        description: "Your files have been uploaded successfully.",
      });
    } catch (error) {
      setFileUploadError((error as Error).message);
      toast({
        title: "Error",
        description: `Failed to upload files: ${(error as Error).message}`,
        variant: "destructive",
      });
    } finally {
      setUploadingFiles(false);
      // Clear file input
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };

  // Handle removing a file
  const handleRemoveFile = (index: number) => {
    const newFiles = [...files];
    newFiles.splice(index, 1);
    setFiles(newFiles);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!project) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <h1 className="text-2xl font-bold mb-4">Project Not Found</h1>
        <p className="text-muted-foreground mb-8">
          The project you are looking for does not exist or you don't have permission to view it.
        </p>
        <Button onClick={() => navigate("/")}>Return to Dashboard</Button>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-6 px-4 md:px-6">
      <div className="flex items-start justify-between mb-6">
        <div>
          <h1 className="text-3xl font-bold">{project.name}</h1>
          <p className="text-muted-foreground">
            Manage dealroom settings and access control
          </p>
        </div>
        <Button onClick={() => navigate("/")}>Back to Dashboard</Button>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="dealroom">Dealroom</TabsTrigger>
          <TabsTrigger value="access">Access</TabsTrigger>
        </TabsList>

        <TabsContent value="dealroom">
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              <Card>
                <CardHeader>
                  <CardTitle>SHOWCASE IMAGES</CardTitle>
                  <CardDescription>
                    Add images to showcase your project. The main image will be displayed prominently.
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Button 
                        type="button" 
                        variant="outline" 
                        onClick={() => imageInputRef.current?.click()}
                        disabled={uploadingImages}
                        className="w-full h-32 border-dashed flex flex-col items-center justify-center"
                      >
                        {uploadingImages ? (
                          <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                        ) : (
                          <>
                            <Upload className="h-6 w-6 mb-2" />
                            <span>Upload Image</span>
                          </>
                        )}
                      </Button>
                      
                      <input
                        type="file"
                        ref={imageInputRef}
                        className="hidden"
                        accept="image/*"
                        multiple
                        onChange={handleImageUpload}
                      />
                      
                      {imageUploadError && (
                        <p className="text-sm text-red-500 mt-1">{imageUploadError}</p>
                      )}
                    </div>
                    
                    {form.watch('showcaseImages')?.length > 0 && (
                      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                        {form.watch('showcaseImages').map((image, index) => (
                          <div key={index} className="relative group">
                            <div className="aspect-square overflow-hidden rounded-md border">
                              <img 
                                src={image.url} 
                                alt={`Showcase image ${index + 1}`}
                                className="object-cover w-full h-full"
                              />
                            </div>
                            
                            <div className="absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                              <div className="flex space-x-2">
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="icon"
                                  className={`${image.isMain ? 'bg-primary text-primary-foreground' : 'bg-background'}`}
                                  onClick={() => handleSetMainImage(index)}
                                >
                                  <Check className="h-4 w-4" />
                                </Button>
                                
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="icon"
                                  className="bg-background text-red-500"
                                  onClick={() => handleDeleteImage(index)}
                                >
                                  <Trash className="h-4 w-4" />
                                </Button>
                              </div>
                            </div>
                            
                            {image.isMain && (
                              <div className="absolute top-2 right-2 bg-primary text-white text-xs px-2 py-1 rounded-full">
                                Main
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>BRANDING</CardTitle>
                  <CardDescription>
                    Customize the look and feel of your dealroom to match your brand.
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <FormField
                    control={form.control}
                    name="title"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Title</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="subtitle"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Subtitle</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="primaryColor"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Primary Color</FormLabel>
                        <FormControl>
                          <ColorPicker value={field.value} onChange={field.onChange} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="logoUrl"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Logo URL</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="https://example.com/logo.png" />
                        </FormControl>
                        <FormDescription>
                          Enter a URL to your logo image.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Description</FormLabel>
                        <FormControl>
                          <Textarea {...field} rows={5} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>INVESTMENT DETAILS</CardTitle>
                  <CardDescription>
                    Provide investment details that will be displayed on your dealroom.
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <FormField
                    control={form.control}
                    name="investmentDetails"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Investment Details</FormLabel>
                        <FormControl>
                          <Textarea {...field} rows={5} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormField
                      control={form.control}
                      name="capitalRaise"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Capital Raise</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="e.g. $5M" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="postValuation"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Post-$</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="e.g. $20M" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="revenueProjection"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>5-7 Year Revenue Projection</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="e.g. $50M" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="exitRange"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Exit Range</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="e.g. $100M - $200M" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="returnMultiple"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Return Multiple</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="e.g. 5-10x" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>EXTERNAL RESOURCES</CardTitle>
                  <CardDescription>
                    Add links to external resources such as pitch decks, websites, or documents.
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="flex flex-col md:flex-row gap-4">
                    <div className="flex-1">
                      <Label htmlFor="resourceLabel">Resource Label</Label>
                      <Input 
                        id="resourceLabel" 
                        value={newResourceLabel} 
                        onChange={(e) => setNewResourceLabel(e.target.value)} 
                        placeholder="e.g. Pitch Deck" 
                      />
                    </div>
                    
                    <div className="flex-1">
                      <Label htmlFor="resourceUrl">Resource URL</Label>
                      <Input 
                        id="resourceUrl" 
                        value={newResourceUrl} 
                        onChange={(e) => setNewResourceUrl(e.target.value)} 
                        placeholder="https://example.com/resource" 
                      />
                    </div>
                    
                    <div className="flex items-end">
                      <Button 
                        type="button" 
                        onClick={handleAddResource}
                        disabled={!newResourceLabel || !newResourceUrl}
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        Add
                      </Button>
                    </div>
                  </div>
                  
                  {externalResources.length > 0 && (
                    <div className="space-y-2 mt-4">
                      {externalResources.map((resource, index) => (
                        <div key={index} className="flex items-center justify-between p-3 border rounded-md">
                          <div className="flex items-center">
                            <Link className="h-4 w-4 text-muted-foreground mr-2" />
                            <div>
                              <p className="font-medium">{resource.label}</p>
                              <p className="text-sm text-muted-foreground">{resource.url}</p>
                            </div>
                          </div>
                          <Button
                            type="button"
                            variant="ghost"
                            size="icon"
                            onClick={() => handleRemoveResource(index)}
                          >
                            <Trash className="h-4 w-4 text-red-500" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>ATTACHMENTS</CardTitle>
                  <CardDescription>
                    Upload documents to share with your potential investors.
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <Button 
                    type="button" 
                    variant="outline" 
                    onClick={() => fileInputRef.current?.click()}
                    disabled={uploadingFiles}
                    className="w-full h-32 border-dashed flex flex-col items-center justify-center"
                  >
                    {uploadingFiles ? (
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                    ) : (
                      <>
                        <Paperclip className="h-6 w-6 mb-2" />
                        <span>Upload Files</span>
                      </>
                    )}
                  </Button>
                  
                  <input
                    type="file"
                    ref={fileInputRef}
                    className="hidden"
                    multiple
                    onChange={handleFileUpload}
                  />
                  
                  {fileUploadError && (
                    <p className="text-sm text-red-500 mt-1">{fileUploadError}</p>
                  )}
                  
                  {files.length > 0 && (
                    <div className="space-y-2 mt-4">
                      {files.map((file, index) => (
                        <div key={index} className="flex items-center justify-between p-3 border rounded-md">
                          <div className="flex items-center">
                            <Paperclip className="h-4 w-4 text-muted-foreground mr-2" />
                            <div>
                              <p className="font-medium">{file.name}</p>
                              <p className="text-sm text-muted-foreground">{file.size}</p>
                            </div>
                          </div>
                          <Button
                            type="button"
                            variant="ghost"
                            size="icon"
                            onClick={() => handleRemoveFile(index)}
                          >
                            <Trash className="h-4 w-4 text-red-500" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>DISPLAY OPTIONS</CardTitle>
                  <CardDescription>
                    Control which features are visible on your dealroom.
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="space-y-4">
                    <FormField
                      control={form.control}
                      name="enableDocumentsSection"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                          <div className="space-y-0.5">
                            <FormLabel>Documents Section</FormLabel>
                            <FormDescription>
                              Show documents section
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="enableContactForm"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                          <div className="space-y-0.5">
                            <FormLabel>Contact Form</FormLabel>
                            <FormDescription>
                              Enable contact form
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                  </div>

                  {form.watch('enableContactForm') && (
                    <FormField
                      control={form.control}
                      name="contactFormRecipient"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Contact Form Recipient Email</FormLabel>
                          <FormControl>
                            <Input placeholder="contact@example.com" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  )}

                  <FormField
                    control={form.control}
                    name="enableSocialSharing"
                    render={({ field }) => (
                      <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                        <div className="space-y-0.5">
                          <FormLabel>Social Sharing</FormLabel>
                          <FormDescription>
                            Enable social sharing buttons
                          </FormDescription>
                        </div>
                        <FormControl>
                          <Switch
                            checked={field.value}
                            onCheckedChange={field.onChange}
                          />
                        </FormControl>
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="showFundraisingProgress"
                    render={({ field }) => (
                      <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                        <div className="space-y-0.5">
                          <FormLabel>Fundraising Progress</FormLabel>
                          <FormDescription>
                            Show fundraising progress bar
                          </FormDescription>
                        </div>
                        <FormControl>
                          <Switch
                            checked={field.value}
                            onCheckedChange={field.onChange}
                          />
                        </FormControl>
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="showTeamMembers"
                    render={({ field }) => (
                      <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                        <div className="space-y-0.5">
                          <FormLabel>Team Members</FormLabel>
                          <FormDescription>
                            Show team members section
                          </FormDescription>
                        </div>
                        <FormControl>
                          <Switch
                            checked={field.value}
                            onCheckedChange={field.onChange}
                          />
                        </FormControl>
                      </FormItem>
                    )}
                  />
                </CardContent>
              </Card>

              <CardFooter className="flex justify-end">
                <Button type="submit" disabled={whitelabelMutation.isPending}>
                  {whitelabelMutation.isPending ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-foreground mr-2"></div>
                      Saving...
                    </>
                  ) : (
                    'Save Changes'
                  )}
                </Button>
              </CardFooter>
            </form>
          </Form>
        </TabsContent>

        <TabsContent value="access">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>TEAM MEMBERS</CardTitle>
                <CardDescription>
                  Manage who has access to this project.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between border-b pb-3">
                    <div>
                      <h3 className="text-sm font-medium">Email Address</h3>
                    </div>
                    <div>
                      <h3 className="text-sm font-medium">Access Level</h3>
                    </div>
                  </div>
                  
                  {project.users?.map((user, index) => (
                    <div key={index} className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Avatar className="h-8 w-8">
                          <AvatarFallback>{user.split('@')[0].substring(0, 2).toUpperCase()}</AvatarFallback>
                        </Avatar>
                        <div>
                          <p className="text-sm font-medium">{user}</p>
                        </div>
                      </div>
                      <div>
                        <span className="inline-flex items-center rounded-full bg-green-50 px-2 py-1 text-xs font-medium text-green-700">
                          Editor
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="mt-4 space-y-2">
                  <h3 className="text-sm font-medium">Add Team Member</h3>
                  <div className="flex space-x-2">
                    <Input placeholder="Email address" />
                    <Button>Add</Button>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>DOMAIN SETTINGS</CardTitle>
                <CardDescription>
                  Configure custom domain settings for this project.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="subdomain">Subdomain</Label>
                  <div className="flex">
                    <Input id="subdomain" value={project.subdomain || ''} readOnly />
                    <span className="flex items-center px-3 border border-l-0 rounded-r-md bg-muted">.finally-app.com</span>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    This is the default URL for your dealroom.
                  </p>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="customDomain">Custom Domain</Label>
                  <Input id="customDomain" placeholder="dealroom.yourdomain.com" />
                  <p className="text-sm text-muted-foreground">
                    To use a custom domain, you'll need to update your DNS settings.
                  </p>
                </div>
                
                <Button variant="outline">Save Domain Settings</Button>
              </CardContent>
            </Card>
            
            <Card className="md:col-span-2">
              <CardHeader>
                <CardTitle>DEALROOM SETTINGS</CardTitle>
                <CardDescription>
                  Control who can access your dealroom and how they can interact with it.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <h3 className="text-lg font-medium">Dealroom Settings</h3>
                  <div className="border rounded-md p-4">
                    <div className="flex flex-col space-y-4">
                      <div className="flex flex-row items-start space-x-3 space-y-0">
                        <div className="flex items-center space-x-2">
                          <Switch id="public-access" />
                          <Label htmlFor="public-access">Public Access</Label>
                        </div>
                        <div className="text-sm text-muted-foreground">
                          Allow anyone with the link to view the dealroom
                        </div>
                      </div>

                      <div className="flex flex-row items-start space-x-3 space-y-0">
                        <div className="flex items-center space-x-2">
                          <Switch id="require-login" />
                          <Label htmlFor="require-login">Require Login</Label>
                        </div>
                        <div className="text-sm text-muted-foreground">
                          Users must have an account and be logged in to view the dealroom
                        </div>
                      </div>

                      <div className="flex flex-row items-start space-x-3 space-y-0">
                        <div className="flex items-center space-x-2">
                          <Switch id="approved-only" />
                          <Label htmlFor="approved-only">Approved Users Only</Label>
                        </div>
                        <div className="text-sm text-muted-foreground">
                          Only users you have explicitly approved can view this dealroom
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <h3 className="text-lg font-medium">Access Requests</h3>
                  <div className="border rounded-md divide-y">
                    <div className="p-4 flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Avatar className="h-8 w-8">
                          <AvatarFallback>JD</AvatarFallback>
                        </Avatar>
                        <div>
                          <p className="text-sm font-medium">john.doe@example.com</p>
                          <p className="text-xs text-muted-foreground">Requested: 2 days ago</p>
                        </div>
                      </div>
                      <div className="flex space-x-2">
                        <Button variant="outline" size="sm" className="text-red-500 border-red-200 hover:bg-red-50">Deny</Button>
                        <Button size="sm">Approve</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}